<!DOCTYPE html>
<html lang="ar" style="direction: rtl;">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>File Reader</title>
    <script src="https://cdn.jsdelivr.net/npm/pako@2.1.0/dist/pako.min.js"></script>
</head>
<body>
    <input type="text" id="searchInput" placeholder="Type a character">
    <button onclick="searchEntries()">create Lib</button>
    <div id="result"></div>
    <button id="2" onclick="compressLib(document.querySelector('#searchInput').value)" style="display: block;">compress Lib</button>
    <button id="3" onclick="binToMap(document.querySelector('#searchInput').value)" style="display: block;">binTo Map</button>
    <button id="4" onclick="searchLib(document.querySelector('#searchInput').value)" style="display: block;">search in Map</button>

    <script>

let Lib;

let lib0 = new Map();
lib0.set('TC',new Set());
lib0.set(lib0.size,[]);



      async function searchEntries() {

    const fileList = await getFileList(document.querySelector('#searchInput').value); 
    console.log('fileList obtained');
    for (const fileName of fileList) {
        try {
            const response = await fetch(`${fileName}`);
            const data = await response.text();
            const parser = new DOMParser();
            const htmlDocument = parser.parseFromString(data, "text/html");
            const aut = htmlDocument.querySelector('.footnote').textContent.replace('(','').replace(')','');
const bk = htmlDocument.querySelector('title').textContent;
var check;
var laut = localStorage.getItem('aut')||'';
var aid;
undefined===lib0.get(1)[0]?(aid=1,lib0.set(aid,[aut])):aid=0;
if(aid==0){
for (let o = 1; o < lib0.size; o++) {
   if( lib0.get(o)[0].includes(aut)||aut.includes(lib0.get(o)[0])){ aid=o; break;  }else{aid=lib0.size}
}  
if(aid===lib0.size){lib0.set(aid,[aut]);}

}
if(!laut.includes(aut)){    laut = laut +' '+aut;
localStorage.setItem('aut',laut);                          }


lib0.get(aid).push([bk]);
const bid = lib0.get(aid).length-1;
lib0.get(aid)[bid].push({aid:aid});
lib0.get(aid)[bid][1]['bid'] = bid;

const crd = htmlDocument.querySelector('.PageText');
const crdc = crd.childNodes;

var c =[];
for (let i = 0; i < crdc.length; i++) {
   var e = crdc[i].querySelector('.title');   
  
    if(null!==e){
       var t = e.textContent;
        c.push(t,crdc[i].textContent.replace(t,''))
        lib0.get('TC').add(t.replace(':',''))
    }else{
       c.push(crdc[i].textContent)
    }
}
lib0.get(aid)[bid][1]['d'] = c;

htmlDocument.querySelector('.PageText').remove();

let tt = htmlDocument.querySelectorAll('.PageText');
tt.forEach(t=>{const u = t.querySelector('.PageNumber'); if(u){t.data =u.textContent;const d = t.querySelector('.PageHead');if(d){t.removeChild(d)}}});

lib0.get(aid)[bid][1]['p'] = {};
const p = lib0.get(aid)[bid][1].p;
for (let i = 0; i < tt.length; i++) {
    
    const ee = tt[i].data;
    if(ee&&undefined!==ee){
          p[Object.entries(p).length] = {c: ee , a: aid,b: bid,t:'np'}; }
     const ff = tt[i].childNodes;
  
const processedNodes = new Set();
for (let f = 0; f < ff.length; f++) {
    if(ff[f].data&&ff[f].data=='&zwnj;'){continue;}

    if(ff[f].nodeName==='HR'){continue;}
    if (ff[f].className !== 'footnote' && ff[f].nodeName !== 'P' && ff[f].className !== 'title' && !processedNodes.has(ff[f])) {
        
        let combinedText = ff[f].data || ff[f].textContent;
        processedNodes.add(ff[f]);

        let a = ff[f].nextSibling;
        while (a && (a.className !== 'footnote' && a.nodeName !== 'P' && a.className !== 'title'&&a.nodeName!=='HR')) {
            combinedText += (a.data || a.textContent || '');
            processedNodes.add(a);
            a = a.nextSibling;
        }

        if (combinedText.length > 0) {
          p[Object.entries(p).length]={c: combinedText , a: aid,b: bid,t:''}; 
        }
    }
    else if (ff[f].nodeName === 'P' && !processedNodes.has(ff[f])) {
        let combinedText = ff[f].textContent;
        processedNodes.add(ff[f]);

        let a = ff[f].nextSibling;
        while (a && (a.className !== 'footnote' && a.nodeName !== 'P' && a.className !== 'title'&&a.nodeName!=='HR')) {
            combinedText += (a.data || a.textContent || '');
            processedNodes.add(a);
            a = a.nextSibling;
        }

        if (combinedText.length > 0) {
          p[Object.entries(p).length]={ c: combinedText , a: aid,b: bid,t:'bs'}; 
        }
    }
     else if (ff[f].className === 'title') {
          p[Object.entries(p).length]={c: ff[f].textContent , a: aid,b: bid,t:'t'}; 
        }

       else if (ff[f].hasAttribute && ff[f].hasAttribute('data-type')) {
         p[Object.entries(p).length]={c: ff[f].textContent , a: aid,b: bid,t:'t'}; 
        }

      else  if (ff[f].className === 'footnote') {
          const rr =  ff[f].querySelectorAll('p');
rr.forEach(y=>{
    let ddd ='';
    while(y.nextSibling&&y.nextSibling.tagName!=='P'){
    if(y.nextSibling.nodeName==='P'){return;}
    const a = y.nextSibling;
         ddd += (a.data || a.textContent || ''); 
        a.parentElement.removeChild(a);}  
            if(ddd.length>0){y.textContent += 'bs'+ddd}
});
          p[Object.entries(p).length]={c:ff[f].textContent , a: aid,b: bid,t:'fn'}; 
        }
else if(ff[f].textContent>0){
          p[Object.entries(p).length]={c:ff[f].textContent , a: aid,b: bid,t:'v'}; 
}
    }
}

        } catch (error) {
            console.error(`Error reading file ${fileName}:`, error,error.message);
           localStorage.setItem('error',`Error reading file ${fileName}:`+error.message);
            return;
        }
    }
console.log('ok');
 Lib = JSON.stringify( Array.from(lib0.entries()));
 localStorage.setItem( 'TC',JSON.stringify( Array.from(lib0.get('TC').entries())));
}


        async function getFileList(directory) {
            
            let folderlist = [];
let fileList = [];
            let dd;
            
          async function next(e){        
            const response = await fetch(e);
            const data = await response.text();
            const parser = new DOMParser();
            const htmlDocument = parser.parseFromString(data, "text/html");
            ///ii = parser.parseFromString(data, "text/html");
            htmlDocument.querySelector('a').remove();
            
            const links = htmlDocument.querySelectorAll("a");
           return links;
           
                                   }
  async function d(t){
         dd =  await next(t);
         dd.forEach(link => {
                let fileName = link.getAttribute("href");
               if(!fileName.includes('step1')){ if(fileName.includes('.htm')){   fileList.push(fileName); }else{  folderlist.push(fileName);  }}
            });
        }
       await d(directory);
      


            if(folderlist.length>0){  
  folderlist.forEach(async f=>{const a = f;  await d(a);});
        }
            return fileList;
        }

 

function compressLib(e){
    

(async () => {
 

// Convert the input string to a Uint8Array
const inputBinary = stringToUint8Array(Lib);

// Compress the binary data using pako with maximum compression level
const compressedUint8Array = pako.deflate(inputBinary, { level: 9 });
        downloadBlob(compressedUint8Array, e, 'application/octet-stream');

})();

}

function uint8ArrayToString(arr) {
    // Use TextDecoder to convert the Uint8Array to a UTF-8 string
    const decoder = new TextDecoder('utf-8');
    return decoder.decode(arr);
}

function downloadBlob(data, fileName, mimeType) {
    const blob = new Blob([data], { type: mimeType });
    const url = URL.createObjectURL(blob);

    const a = document.createElement('a');
    a.href = url;
    a.download = fileName;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);

    URL.revokeObjectURL(url);
}

function stringToUint8Array(str) {
    const utf8 = unescape(encodeURIComponent(str));
    const arr = new Uint8Array(utf8.length);
    for (let i = 0; i < utf8.length; i++) {
        arr[i] = utf8.charCodeAt(i);
    }
    return arr;
}
let library;
function binToString(e) {
            const compressedData = new Uint8Array(e);
            const decompressedData = pako.inflate(compressedData);
            const originalString = uint8ArrayToString(decompressedData);
          library = originalString;

        };
        function searchLib(e){
        let uu = [];
for (let i = 1; i < lib0.size; i++) {
    const f = lib0.get(i);
    for (let a = 1; a < f.length; a++) {
        const p = lib0.get(i)[a][1].p;
        for(const d in p){
            const c = p[d]['c'];
       if(c&&c.includes(e)){
            uu.push(c); }   }
        }
    }
console.log('ok');return uu;
}

function binToMap(e){

    (async () => {
    try {
        const response = await fetch(e);
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        
        // Read the response as an ArrayBuffer
        const arrayBuffer = await response.arrayBuffer();
        
        // Convert the ArrayBuffer to a Uint8Array
        const compressedUint8Array = new Uint8Array(arrayBuffer);
        
        // Decompress the binary data using Pako
        const decompressedUint8Array = pako.inflate(compressedUint8Array);
        
        // Convert the decompressed Uint8Array back to a string
        const originalString = uint8ArrayToString(decompressedUint8Array);
        
        // Log the original string to console or use it as needed
        lib0 = new Map(JSON.parse(originalString));
        alert('map created!')
    } catch (error) {
        alert('There was a problem with the fetch operation:', error);
    }
})();
}
    </script>
</body>
</html>
