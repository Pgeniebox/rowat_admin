let lib0 = {};
const aut = document.querySelector('.footnote').textContent.replace('(','').replace(')','')
  lib0[aut] = {};
const bk = document.querySelector('title').textContent
lib0[aut][bk]  = {};
const oo = 'المقدمة'
lib0[aut][bk][oo] = {};
const crd = document.querySelector('.PageText');
const crdp = crd.querySelectorAll('.title');
const crdc = crd.childNodes;

for (let i = 0; i < crdc.length; i++) {
   var e = crdc[i].querySelector('.title');   
  
    if(null!==e){
       var t = e.textContent;
        lib0[aut][bk][oo][i] = {};
       lib0[aut][bk][oo][i][t]=  crdc[i].textContent.replace(t,'');
    }else{
        lib0[aut][bk][oo][i] = crdc[i].textContent;
    }
    
}

////////////////////////
const data = document.querySelectorAll('.PageNumber');
var p = {};
p[bk] = {};
const pg = 'p';
for (let i = 0; i < data.length - 1; i++) {
    const e =data[i].textContent;
    p[bk][e] = {};
    
}
const crd = document.querySelector('.PageText').querySelectorAll('.title')


//////////////////////////!!!!!!!!!!!
const crd = document.querySelectorAll('.PageText');
for (let f = 1; f < crd.length; f++) {
    lib0[aut][bk][f]={};
const crdc = crd[f].childNodes;

for (let i = 0; i < crdc.length; i++) {
    if(crdc[i].nodeName === '#text'){break;}
   var e = crdc[i].querySelector('.title');   
  
    if(null!==e){
       var t = e.textContent;
        lib0[aut][bk][f][i] = {};
       lib0[aut][bk][f][i][t]=  crdc[i].textContent.replace(t,'');
    }else{
        lib0[aut][bk][f][i] = crdc[i].textContent;
    }
    
}
}

//////////////////////

const crd = document.querySelectorAll('.PageText');
for (let f = 1; f < crd.length; f++) {
    
const crdc = crd[f].childNodes;

for (let i = 0; i < crdc.length; i++) {
    if(crdc[i].nodeName === '#text'){break;}
    lib0[aut][bk][f]={};
   var e = crdc[i].querySelector('.title');   
  
    if(null!==e){
       var t = e.textContent;
        lib0[aut][bk][f][i] = {};
       lib0[aut][bk][f][i][t]=  crdc[i].textContent.replace(t,'');
    }else{
        lib0[aut][bk][f][i] = crdc[i].textContent;
    }
    
}
}

///////////
document.querySelector('.PageText').remove();
  const rr = document.querySelectorAll('p');
rr.forEach(y=>{
    while(y.nextSibling){
    if(y.nextSibling.nodeName==='P'){return;}
    const a = y.nextSibling;
        a.data?y.textContent += a.data:a.textContent.length>0?y.textContent += a.textContent:null;    
        a.parentElement.removeChild(a);}
    
})

/////////////////////
let tt = document.querySelectorAll('.PageText');
tt.forEach(t=>{const u = t.querySelector('.PageNumber'); if(u){t.data =u.textContent;const d = t.querySelector('.PageHead');if(d){t.removeChild(d)}}})

/////////////////////////////////

const crd = document.querySelector('.PageText');
const p = 'p';
const fn = 'fn'
for (let i = 0; i < crd.length; i++) {
    lib0[aut][bk][p] = {};
    const ee = crd[i].data;
    lib0[aut][bk][p][i] = ee;
    const ff = crd[i].childNodes;
    for (let f = 0; i < ff.length; f++) {
       ///get #text:
        if(ff[f].data){var a = ff[f].nextSibling;while(a.className !=='.footnote'||a.nodeName!=='P'||a.className !=='.title'||!a.hasAttribute('data-type')){
            a.data?ff[f].data += a.data:a.textContent.length>0?ff[f].data += a.textContent:null;
            a.parentElement.removeChild(a);
        }
                 lib0[aut][bk][p][f+1]=  ff[f].data; return;      
            }
        ////get P:
        if(ff[f].nodeName==='P'){
            var a = ff[f].nextSibling;while(a.className !=='.footnote'||a.nodeName!=='P'||a.className !=='.title'||!a.hasAttribute('data-type')){
            a.data?ff[f].data += a.data:a.textContent.length>0?ff[f].data += a.textContent:null;
            a.parentElement.removeChild(a);
        }
                             lib0[aut][bk][p][f+1]=  ff[f].data; return;      
        }
        ////get .title:
      if(ff[f].className==='.title'){lib0[aut][bk][p][f+1]= ff.textContent;return; }  
        ///get data-type:
      if(ff[f].hasAttribute('data-type')) {lib0[aut][bk][p][f+1]= ff.textContent;return; } 
        ///get .footnote:
        if(ff[f].className==='.footnote'){lib0[aut][bk][p][fn]=fn;}
    }
    
    
}
/////////////////


let lib0 = {};
const aut = document.querySelector('.footnote').textContent.replace('(','').replace(')','')
  lib0[aut] = {};
const bk = document.querySelector('title').textContent
lib0[aut][bk]  = {};
const oo = 'المقدمة'
lib0[aut][bk][oo] = {};
const crd = document.querySelector('.PageText');
const crdp = crd.querySelectorAll('.title');
const crdc = crd.childNodes;

for (let i = 0; i < crdc.length; i++) {
   var e = crdc[i].querySelector('.title');   
  
    if(null!==e){
       var t = e.textContent;
        lib0[aut][bk][oo][i] = {};
       lib0[aut][bk][oo][i][t]=  crdc[i].textContent.replace(t,'');
    }else{
        lib0[aut][bk][oo][i] = crdc[i].textContent;
    }
    
}
document.querySelector('.PageText').remove();

let tt = document.querySelectorAll('.PageText');
tt.forEach(t=>{const u = t.querySelector('.PageNumber'); if(u){t.data =u.textContent;const d = t.querySelector('.PageHead');if(d){t.removeChild(d)}}});


const p = 'p';
const fn = 'fn';
lib0[aut][bk][p] = {};
for (let i = 0; i < tt.length; i++) {
    
    const ee = tt[i].data;
     // Use textContent to get the element's text content
    lib0[aut][bk][p][i] = [ee];
     const ff = tt[i].childNodes;
const processedNodes = new Set(); // To keep track of processed nodes

for (let f = 0; f < ff.length; f++) {
    if(ff[f].nodeName==='HR'){continue;}
    if (ff[f].className !== 'footnote' && ff[f].nodeName !== 'P' && ff[f].className !== 'title' && !processedNodes.has(ff[f])) {
        let combinedText = ff[f].data || ff[f].textContent;
        processedNodes.add(ff[f]);

        let a = ff[f].nextSibling;
        while (a && (a.className !== 'footnote' && a.nodeName !== 'P' && a.className !== 'title'&&a.nodeName!=='HR')) {
            combinedText += (a.data || a.textContent || '');
            processedNodes.add(a);
            a = a.nextSibling;
        }

        if (combinedText.length > 0) {
            lib0[aut][bk][p][i].push(combinedText);
        }
    }
    else if (ff[f].nodeName === 'P' && !processedNodes.has(ff[f])) {
        let combinedText = ff[f].textContent;
        processedNodes.add(ff[f]);

        let a = ff[f].nextSibling;
        while (a && (a.className !== 'footnote' && a.nodeName !== 'P' && a.className !== 'title'&&a.nodeName!=='HR')) {
            combinedText += (a.data || a.textContent || '');
            processedNodes.add(a);
            a = a.nextSibling;
        }

        if (combinedText.length > 0) {
            lib0[aut][bk][p][i].push('bs'+combinedText);
        }
    }
     else if (ff[f].className === 'title') {
            lib0[aut][bk][p][i].push('t'+ff[f].textContent);
        }

       else if (ff[f].hasAttribute && ff[f].hasAttribute('data-type')) {
            lib0[aut][bk][p][i].push('t'+ff[f].textContent);
        }

      else  if (ff[f].className === 'footnote') {
          const rr =  ff[f].querySelectorAll('p');
rr.forEach(y=>{
    let ddd ='';
    while(y.nextSibling&&y.nextSibling.tagName!=='P'){
    if(y.nextSibling.nodeName==='P'){return;}
    const a = y.nextSibling;
         ddd += (a.data || a.textContent || ''); 
        a.parentElement.removeChild(a);}  
            if(ddd.length>0){y.textContent += 'bs'+ddd}
});
            lib0[aut][bk][p][i][fn] = ff[f].textContent;     
        }
else if(!lib0[aut][bk][p][i]){
        lib0[aut][bk][p][i-1][0] += ff[f].textContent;}
    }
}


JSON.parse(localStorage.getItem('lib0'));
localStorage.setItem('lib0',JSON.stringify(lib0));
////////////////////////////////

const aut = document.querySelector('.footnote').textContent.replace('(','').replace(')','');
const bk = document.querySelector('title').textContent;
var check;
const laut = localStorage.getItem('aut');
var aid;
let lib0;
null!==laut?(laut===aut?check=1:check=0):check=-1;
if(check!==-1){
     lib0 = new Map(JSON.parse(localStorage.getItem('lib0')));
     
    if(check===1){ aid=lib0.size-2; }else{aid=lib0.size-1;lib0.set(aid,[aut]);}
     lib0.set('TC',new Set(JSON.parse(localStorage.getItem('tc'))));
}else{
     lib0 = new Map(); aid=lib0.size; lib0.set('TC',new Set());lib0.set(aid,[aut]);
}


lib0.get(aid).push([bk])
const bid = lib0.get(aid).length - 2;
lib0.get(aid)[bid+1].push({aid:aid});
lib0.get(aid)[bid+1][1]['bid'] = bid;


const crd = document.querySelector('.PageText');
const crdc = crd.childNodes;


var c =[];
for (let i = 0; i < crdc.length; i++) {
   var e = crdc[i].querySelector('.title');   
  
    if(null!==e){
       var t = e.textContent;
        c.push(t,crdc[i].textContent.replace(t,''))
        lib0.get('TC').add(t.replace(':',''))
    }else{
       c.push(crdc[i].textContent)
    }
}
lib0.get(aid)[bid+1][1]['d'] = c;

document.querySelector('.PageText').remove();

let tt = document.querySelectorAll('.PageText');
tt.forEach(t=>{const u = t.querySelector('.PageNumber'); if(u){t.data =u.textContent;const d = t.querySelector('.PageHead');if(d){t.removeChild(d)}}});


lib0.get(aid)[bid+1][1]['p'] = {};
const p = lib0.get(aid)[bid+1][1].p;
for (let i = 0; i < tt.length; i++) {
    
    const ee = tt[i].data;
          p[Object.entries(p).length]={c:ee , a: aid,b: bid,t:'np'}; 
     const ff = tt[i].childNodes;
  
const processedNodes = new Set();
for (let f = 0; f < ff.length; f++) {
    if(ff[f].data&&ff[f].data=='&zwnj;'){continue;}

    if(ff[f].nodeName==='HR'){continue;}
    if (ff[f].className !== 'footnote' && ff[f].nodeName !== 'P' && ff[f].className !== 'title' && !processedNodes.has(ff[f])) {
        
        let combinedText = ff[f].data || ff[f].textContent;
        processedNodes.add(ff[f]);

        let a = ff[f].nextSibling;
        while (a && (a.className !== 'footnote' && a.nodeName !== 'P' && a.className !== 'title'&&a.nodeName!=='HR')) {
            combinedText += (a.data || a.textContent || '');
            processedNodes.add(a);
            a = a.nextSibling;
        }

        if (combinedText.length > 0) {
          p[Object.entries(p).length]={c:combinedText , a: aid,b: bid,t:''}; 
        }
    }
    else if (ff[f].nodeName === 'P' && !processedNodes.has(ff[f])) {
        let combinedText = ff[f].textContent;
        processedNodes.add(ff[f]);

        let a = ff[f].nextSibling;
        while (a && (a.className !== 'footnote' && a.nodeName !== 'P' && a.className !== 'title'&&a.nodeName!=='HR')) {
            combinedText += (a.data || a.textContent || '');
            processedNodes.add(a);
            a = a.nextSibling;
        }

        if (combinedText.length > 0) {
          p[Object.entries(p).length]={c:combinedText , a: aid,b: bid,t:'bs'}; 
        }
    }
     else if (ff[f].className === 'title') {
          p[Object.entries(p).length]={c:ff[f].textContent , a: aid,b: bid,t:'t'}; 
        }

       else if (ff[f].hasAttribute && ff[f].hasAttribute('data-type')) {
         p[Object.entries(p).length]={c:ff[f].textContent , a: aid,b: bid,t:'t'}; 
        }

      else  if (ff[f].className === 'footnote') {
          const rr =  ff[f].querySelectorAll('p');
rr.forEach(y=>{
    let ddd ='';
    while(y.nextSibling&&y.nextSibling.tagName!=='P'){
    if(y.nextSibling.nodeName==='P'){return;}
    const a = y.nextSibling;
         ddd += (a.data || a.textContent || ''); 
        a.parentElement.removeChild(a);}  
            if(ddd.length>0){y.textContent += 'bs'+ddd}
});
          p[Object.entries(p).length]={c:ff[f].textContent , a: aid,b: bid,t:'fn'}; 
        }
else if(ff[f].textContent>0){
          p[Object.entries(p).length]={c:ff[f].textContent , a: aid,b: bid,t:'v'}; 
}
    }
}
localStorage.setItem('tc',JSON.stringify(Array.from(lib0.get('TC'))));
localStorage.setItem('lib0',JSON.stringify(Array.from(lib0.entries())));
localStorage.setItem('aut',aut);
